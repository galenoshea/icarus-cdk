//! Icarus MCP Server
//!
//! A Model Context Protocol (MCP) server that provides AI tools backed by
//! Internet Computer Protocol (ICP) canisters.

use anyhow::Result;
use candid::Principal;
use clap::Parser;
use std::str::FromStr;
use tokio::io::{stdin, stdout};
use tracing::{info, warn};

mod server;
mod client;
mod protocol;
mod config;

use crate::server::McpServer;
use crate::config::McpConfig;

/// Icarus MCP Server - serves MCP protocol for ICP canisters
#[derive(Parser, Debug)]
#[command(name = "icarus-mcp")]
#[command(about = "MCP server for Internet Computer canisters")]
#[command(version = env!("CARGO_PKG_VERSION"))]
struct Args {
    /// Canister ID to connect to
    #[arg(long, env = "ICARUS_CANISTER_ID")]
    canister_id: String,

    /// IC network URL (defaults to localhost for development)
    #[arg(long, env = "ICARUS_IC_URL", default_value = "http://localhost:4943")]
    ic_url: String,

    /// Run as daemon instead of stdio mode
    #[arg(long)]
    daemon: bool,

    /// Port for daemon mode
    #[arg(long, default_value = "3000")]
    port: u16,

    /// Enable debug logging
    #[arg(long, short = 'v')]
    verbose: bool,
}

#[tokio::main]
async fn main() -> Result<()> {
    let args = Args::parse();

    // Initialize logging
    let log_level = if args.verbose { "debug" } else { "info" };
    tracing_subscriber::fmt()
        .with_env_filter(format!("icarus_mcp={}", log_level))
        .init();

    // Parse canister ID
    let canister_id = Principal::from_str(&args.canister_id)
        .map_err(|e| anyhow::anyhow!("Invalid canister ID '{}': {}", args.canister_id, e))?;

    info!(
        "Starting Icarus MCP Server v{}",
        env!("CARGO_PKG_VERSION")
    );
    info!("Canister ID: {}", canister_id);
    info!("IC URL: {}", args.ic_url);

    // Create server configuration
    let config = McpConfig::new(canister_id, args.ic_url);

    // Create and start MCP server
    let server = McpServer::new(config).await?;

    if args.daemon {
        warn!("Daemon mode not yet implemented, falling back to stdio mode");
        info!("Connect your MCP client to this process via stdio");
    } else {
        info!("Running in stdio mode for MCP client connection");
    }

    // Serve MCP protocol over stdio
    server.serve(stdin(), stdout()).await
}