//! Tool provider trait for modern Icarus service architecture
//!
//! This module defines the core traits for implementing MCP tools using
//! Rust 2025 idiomatic patterns with trait-based interfaces.

use crate::tool::{ComplexityLevel, ToolCategory, ToolInfo};
use crate::Result;
use async_trait::async_trait;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Core trait for Icarus MCP tool providers
///
/// Implement this trait on your service struct to provide MCP tools.
/// The #[icarus_tools] macro generates IC CDK wrappers automatically.
/// Service metadata comes from CARGO_PKG_NAME and CARGO_PKG_VERSION.
pub trait IcarusToolProvider: Send + Sync + 'static {
    /// Service version for compatibility tracking
    fn service_version() -> &'static str
    where
        Self: Sized,
    {
        "1.0.0"
    }

    /// Service category for organization
    fn service_category() -> ToolCategory
    where
        Self: Sized,
    {
        ToolCategory::Utility
    }

    /// Initialize service instance (called once per canister)
    fn initialize() -> Self
    where
        Self: Sized + Default,
    {
        Self::default()
    }

    /// Custom initialization with parameters
    fn initialize_with_params(_params: HashMap<String, String>) -> Result<Self>
    where
        Self: Sized + Default,
    {
        Ok(Self::initialize())
    }
}

/// Trait for individual tool methods
///
/// This trait is implemented automatically by the #[icarus_tools] macro
/// for methods marked with #[tool].
#[async_trait]
pub trait IcarusToolMethod<Input, Output>
where
    Input: for<'de> Deserialize<'de> + Send + 'static,
    Output: Serialize + Send + 'static,
{
    /// Execute the tool method
    async fn execute(&self, input: Input) -> Result<Output>;

    /// Get tool metadata
    fn tool_info() -> ToolInfo;

    /// Check if authentication is required
    fn requires_auth() -> bool {
        true
    }

    /// Get execution complexity level
    fn complexity_level() -> ComplexityLevel {
        ComplexityLevel::Moderate
    }
}

/// Metadata for a tool method generated by the macro
#[derive(Debug, Clone)]
pub struct ToolMethodMetadata {
    pub name: String,
    pub description: String,
    pub input_schema: serde_json::Value,
    pub output_schema: serde_json::Value,
    pub requires_auth: bool,
    pub is_query: bool,
    pub complexity: ComplexityLevel,
    pub category: Option<ToolCategory>,
    pub tags: Vec<String>,
    pub title: Option<String>,
    pub icon: Option<String>,
}

/// Service metadata generated by the macro
#[derive(Debug, Clone)]
pub struct ServiceMetadata {
    pub version: &'static str,
    pub category: ToolCategory,
    pub tools: Vec<ToolMethodMetadata>,
}

/// Macro helper trait for generating tool metadata
///
/// This trait is implemented automatically by the #[icarus_tools] macro.
pub trait GenerateServiceMetadata {
    /// Generate complete service metadata including all tools
    fn service_metadata() -> ServiceMetadata;

    /// Generate MCP tools list for the list_tools() function
    fn generate_tools_json() -> serde_json::Value;
}

/// Authentication configuration for tools
#[derive(Debug, Clone)]
pub struct AuthConfig {
    /// Whether authentication is required by default
    pub require_auth_by_default: bool,
    /// Custom authentication function
    pub custom_auth_check: Option<fn() -> Result<()>>,
    /// Skip authentication for specific methods
    pub skip_auth_methods: Vec<String>,
}

impl Default for AuthConfig {
    fn default() -> Self {
        Self {
            require_auth_by_default: true,
            custom_auth_check: None,
            skip_auth_methods: Vec::new(),
        }
    }
}

/// Error handling configuration
#[derive(Debug, Clone)]
pub struct ErrorConfig {
    /// Whether to include error details in responses
    pub include_error_details: bool,
    /// Custom error formatter
    pub custom_error_formatter: Option<fn(&str) -> String>,
}

impl Default for ErrorConfig {
    fn default() -> Self {
        Self {
            include_error_details: true,
            custom_error_formatter: None,
        }
    }
}

/// Service configuration for customizing behavior
#[derive(Debug, Clone, Default)]
pub struct ServiceConfig {
    /// Authentication settings
    pub auth: AuthConfig,
    /// Error handling settings
    pub error: ErrorConfig,
}
