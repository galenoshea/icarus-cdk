//! Implementation of the icarus::wasi!() function-like macro
//!
//! This macro provides automatic WASI initialization for Icarus canisters
//! that need ecosystem library support.

use proc_macro::TokenStream;
use proc_macro2::TokenStream as TokenStream2;
use quote::quote;
use syn::Error;

/// Expand the icarus::wasi!() macro
pub fn expand(_input: TokenStream) -> TokenStream {
    match expand_wasi_macro() {
        Ok(tokens) => tokens.into(),
        Err(err) => err.to_compile_error().into(),
    }
}

fn expand_wasi_macro() -> Result<TokenStream2, Error> {
    // Generate a dependency-free WASI marker macro
    // The auth!() macro handles actual WASI initialization when icarus-wasi is available

    let expanded = quote! {
        // WASI marker macro - indicates this canister uses WASI features
        // Actual initialization is handled by the auth!() macro when icarus-wasi is available

        /// WASI support marker generated by icarus::wasi!() macro
        /// This is a compile-time marker that documents WASI usage
        const _ICARUS_WASI_MARKER: () = {
            // This const ensures the macro generates some code
            // but has zero runtime overhead and no dependencies
        };

        /// Check if WASI support is enabled in this canister
        /// This is a compile-time constant that can be used for conditional compilation
        pub const USES_WASI: bool = true;
    };

    Ok(expanded)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_wasi_macro_generation() {
        let result = expand_wasi_macro();
        assert!(result.is_ok());

        let expanded = result.unwrap();
        let code = expanded.to_string();

        println!("Generated code: {}", code);

        // Should contain WASI marker constant
        assert!(code.contains("_ICARUS_WASI_MARKER"));

        // Should contain USES_WASI constant
        assert!(code.contains("USES_WASI"));

        // Should be dependency-free (no icarus_wasi references)
        assert!(!code.contains("icarus_wasi"));

        // Should be zero-runtime overhead
        assert!(code.contains("compile-time marker"));
    }

    #[test]
    fn test_wasi_macro_dependency_free() {
        let result = expand_wasi_macro();
        assert!(result.is_ok());

        let expanded = result.unwrap();
        let code = expanded.to_string();

        // Should not reference any external crates
        assert!(!code.contains("icarus_wasi"));
        assert!(!code.contains("ic_wasi_polyfill"));
        assert!(!code.contains("catch_unwind"));

        // Should be purely compile-time
        assert!(code.contains("const"));
        assert!(!code.contains("fn "));
        assert!(!code.contains("pre_upgrade"));
    }
}
