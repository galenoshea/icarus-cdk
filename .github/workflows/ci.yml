name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0  # Disable for CI to ensure clean builds
  RUSTFLAGS: "-D warnings"

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick validation checks that should fail fast
  validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry & git
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Check version consistency
      run: |
        chmod +x scripts/check-versions.sh
        ./scripts/check-versions.sh
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Build once and save artifacts for other jobs
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: validation
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Cache cargo registry & git
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-build-
    
    - name: Build all targets
      run: |
        cargo build --release --all-features
        cargo build --target wasm32-unknown-unknown --release
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/release
          target/wasm32-unknown-unknown
        retention-days: 1

  # Run tests in parallel with matrix strategy
  test:
    name: Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, doc]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target
    
    - name: Cache cargo registry & git
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        case "${{ matrix.test-type }}" in
          unit)
            cargo test --lib --all-features
            ;;
          integration)
            cargo test --test '*' --all-features
            ;;
          doc)
            cargo test --doc --all-features
            ;;
        esac

  # E2E tests run separately due to different requirements
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target
    
    - name: Cache cargo registry & git
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Cache cargo binaries
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-bin-ic-wasm
        restore-keys: |
          ${{ runner.os }}-cargo-bin-
    
    - name: Install ic-wasm if not cached
      run: |
        if ! command -v ic-wasm &> /dev/null; then
          echo "Installing ic-wasm..."
          cargo install ic-wasm --locked
        else
          echo "ic-wasm already installed"
        fi
    
    - name: Build CLI for E2E tests
      run: |
        cargo build --package icarus-cli --release
        chmod +x target/release/icarus
    
    - name: Run E2E tests
      run: |
        cd cli
        cargo test --test '*' --release
      env:
        RUST_LOG: debug

  # Coverage analysis with thresholds
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Cache cargo registry & git
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Cache cargo binaries
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-bin-ic-wasm
        restore-keys: |
          ${{ runner.os }}-cargo-bin-
    
    - name: Install ic-wasm if not cached
      run: |
        if ! command -v ic-wasm &> /dev/null; then
          echo "Installing ic-wasm..."
          cargo install ic-wasm --locked
        else
          echo "ic-wasm already installed"
        fi
    
    - name: Generate code coverage
      run: |
        cargo llvm-cov --all-features --workspace \
          --lcov --output-path lcov.info \
          --ignore-filename-regex '(tests?/|examples/|target/)'
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Generate coverage report
      run: |
        cargo llvm-cov report --summary-only | tee coverage-summary.txt
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat coverage-summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Extract coverage percentage and check threshold
        COVERAGE=$(grep -oP 'TOTAL.*?\K[0-9.]+(?=%)' coverage-summary.txt | head -1)
        echo "Current coverage: ${COVERAGE}%"
        
        # Fail if coverage is below 60%
        if (( $(echo "$COVERAGE < 60" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below minimum threshold of 60%" | tee -a $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets minimum threshold" | tee -a $GITHUB_STEP_SUMMARY
        fi

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validation
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry & git
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build documentation
      run: RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --all-features
    
    - name: Check for broken links
      run: |
        cargo doc --no-deps --all-features
        echo "✅ Documentation built successfully"

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [validation, build, test, e2e, coverage, docs]
    if: always()
    steps:
    - name: Check CI Status
      run: |
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "❌ CI failed - one or more jobs failed"
          exit 1
        elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
          echo "⚠️ CI cancelled - one or more jobs were cancelled"
          exit 1
        else
          echo "✅ All CI checks passed successfully!"
        fi