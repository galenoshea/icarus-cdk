name: Test Matrix

# Comprehensive test matrix for different OS and Rust versions
on:
  # Weekly comprehensive testing
  schedule:
    - cron: '0 0 * * 0'  # Sunday at midnight UTC
  # Manual trigger
  workflow_dispatch:
    inputs:
      os-matrix:
        description: 'OS to test (all, ubuntu, macos, windows)'
        required: false
        default: 'all'
      rust-matrix:
        description: 'Rust versions to test (all, stable, beta, nightly)'
        required: false
        default: 'all'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Define test matrix dynamically
  matrix-setup:
    name: Setup Matrix
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.matrix.outputs.os }}
      rust: ${{ steps.matrix.outputs.rust }}
    steps:
    - id: matrix
      run: |
        # OS matrix
        if [[ "${{ github.event.inputs.os-matrix }}" == "ubuntu" ]]; then
          echo "os=[\"ubuntu-latest\"]" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.os-matrix }}" == "macos" ]]; then
          echo "os=[\"macos-latest\"]" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.os-matrix }}" == "windows" ]]; then
          echo "os=[\"windows-latest\"]" >> $GITHUB_OUTPUT
        else
          echo "os=[\"ubuntu-latest\", \"macos-latest\", \"windows-latest\"]" >> $GITHUB_OUTPUT
        fi
        
        # Rust matrix
        if [[ "${{ github.event.inputs.rust-matrix }}" == "stable" ]]; then
          echo "rust=[\"stable\"]" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.rust-matrix }}" == "beta" ]]; then
          echo "rust=[\"beta\"]" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.rust-matrix }}" == "nightly" ]]; then
          echo "rust=[\"nightly\"]" >> $GITHUB_OUTPUT
        else
          echo "rust=[\"stable\", \"beta\"]" >> $GITHUB_OUTPUT
        fi

  # Cross-platform and cross-version testing
  test-cross-matrix:
    name: Test ${{ matrix.os }} / Rust ${{ matrix.rust }}
    runs-on: ${{ matrix.os }}
    needs: matrix-setup
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.matrix-setup.outputs.os) }}
        rust: ${{ fromJson(needs.matrix-setup.outputs.rust) }}
        exclude:
          # Skip beta on Windows to save time
          - os: windows-latest
            rust: beta
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: wasm32-unknown-unknown
    
    # OS-specific cache paths
    - name: Cache cargo (Unix)
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    
    - name: Cache cargo (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    
    # Install platform-specific dependencies
    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install coreutils
    
    - name: Install ic-wasm
      run: |
        cargo install ic-wasm --locked || true
    
    # Run tests with platform-specific adjustments
    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: |
        cargo test --all-features --release
        cargo test --doc
        cd cli && cargo test --test '*' --release
      continue-on-error: ${{ matrix.rust == 'nightly' }}
    
    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: |
        cargo test --all-features --release
        cargo test --doc
      continue-on-error: ${{ matrix.rust == 'nightly' }}
      # Note: E2E tests may have issues on Windows due to path differences
    
    - name: Build WASM
      run: |
        cargo build --target wasm32-unknown-unknown --release

  # Performance comparison across platforms
  benchmark:
    name: Benchmark ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: matrix-setup
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install hyperfine
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          wget https://github.com/sharkdp/hyperfine/releases/download/v1.18.0/hyperfine_1.18.0_amd64.deb
          sudo dpkg -i hyperfine_1.18.0_amd64.deb
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install hyperfine
        fi
    
    - name: Build release binary
      run: cargo build --release --all-features
    
    - name: Benchmark tests
      run: |
        hyperfine --warmup 2 --min-runs 5 \
          'cargo test --lib --release --quiet' \
          'cargo test --doc --quiet' \
          --export-markdown benchmark-${{ runner.os }}.md
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-${{ runner.os }}
        path: benchmark-${{ runner.os }}.md

  # Test result aggregation
  test-summary:
    name: Test Matrix Summary
    runs-on: ubuntu-latest
    needs: [test-cross-matrix]
    if: always()
    steps:
    - name: Generate summary
      run: |
        echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
          echo "❌ Some tests failed across the matrix" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ All tests passed across all platforms and Rust versions!" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- OS tested: ${{ needs.matrix-setup.outputs.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- Rust versions: ${{ needs.matrix-setup.outputs.rust }}" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Performance Notes" >> $GITHUB_STEP_SUMMARY
        echo "- Ubuntu: Fastest CI performance" >> $GITHUB_STEP_SUMMARY
        echo "- macOS: Good compatibility, slower than Linux" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: May have path-related issues with E2E tests" >> $GITHUB_STEP_SUMMARY