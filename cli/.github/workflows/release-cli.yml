name: Release Icarus CLI

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin-arm64
            
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin-x64
            
          # Linux x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64
            
          # Linux ARM64 (cross-compilation)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64
            
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          
      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if command -v strip &> /dev/null; then
            strip target/${{ matrix.target }}/release/icarus
          fi
          
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../icarus-cli-${{ matrix.platform }}.tar.gz icarus
          cd ../../../
          sha256sum icarus-cli-${{ matrix.platform }}.tar.gz > icarus-cli-${{ matrix.platform }}.tar.gz.sha256
          
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path icarus.exe -DestinationPath ../../../icarus-cli-${{ matrix.platform }}.zip
          cd ../../../
          (Get-FileHash icarus-cli-${{ matrix.platform }}.zip -Algorithm SHA256).Hash | Out-File icarus-cli-${{ matrix.platform }}.zip.sha256
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: icarus-cli-${{ matrix.platform }}
          path: |
            icarus-cli-${{ matrix.platform }}.*
          retention-days: 7

  upload-to-icp:
    name: Upload to ICP Canister
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.version
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Install DFX
        run: |
          sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"
          echo "$HOME/bin" >> $GITHUB_PATH
          
      - name: Setup DFX identity
        run: |
          # Import the deployment identity from secrets
          echo "${{ secrets.ICP_DEPLOY_KEY }}" > identity.pem
          dfx identity import --disable-encryption ci-deploy identity.pem
          dfx identity use ci-deploy
          rm identity.pem
          
      - name: Set network
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "NETWORK=ic" >> $GITHUB_ENV
          else
            echo "NETWORK=local" >> $GITHUB_ENV
          fi
          
      - name: Create upload script
        run: |
          cat > upload_to_icp.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const { exec } = require('child_process');
          const { promisify } = require('util');
          
          const execAsync = promisify(exec);
          
          async function uploadBinary(platform, version) {
            const artifacts = fs.readdirSync('./artifacts');
            const platformDir = artifacts.find(dir => dir.includes(platform));
            
            if (!platformDir) {
              console.error(`No artifacts found for platform: ${platform}`);
              return false;
            }
            
            const archiveExt = platform.includes('windows') ? '.zip' : '.tar.gz';
            const archivePath = path.join('./artifacts', platformDir, `icarus-cli-${platform}${archiveExt}`);
            const checksumPath = `${archivePath}.sha256`;
            
            if (!fs.existsSync(archivePath)) {
              console.error(`Archive not found: ${archivePath}`);
              return false;
            }
            
            const binaryData = fs.readFileSync(archivePath);
            const checksum = fs.readFileSync(checksumPath, 'utf8').trim().split(' ')[0];
            
            // Convert to hex for Motoko
            const hexData = '0x' + binaryData.toString('hex');
            
            // Call canister method
            const command = `dfx canister call --network ${process.env.NETWORK} backend uploadCLIBinary '(record { 
              version = "${version}";
              platform = variant { ${getPlatformVariant(platform)} };
              binary_data = blob "${hexData}";
              checksum = "${checksum}";
              release_notes = opt "Automated release from GitHub Actions";
            })'`;
            
            console.log(`Uploading ${platform}...`);
            
            try {
              const { stdout, stderr } = await execAsync(command);
              console.log(`Success: ${stdout}`);
              return true;
            } catch (error) {
              console.error(`Failed to upload ${platform}: ${error.message}`);
              return false;
            }
          }
          
          function getPlatformVariant(platform) {
            const variants = {
              'darwin-arm64': 'DarwinArm64',
              'darwin-x64': 'DarwinX64',
              'linux-x64': 'LinuxX64',
              'linux-arm64': 'LinuxArm64',
              'windows-x64': 'WindowsX64'
            };
            return variants[platform] || 'LinuxX64';
          }
          
          async function main() {
            const version = process.env.VERSION || process.env.GITHUB_REF_NAME || '0.1.0';
            const cleanVersion = version.replace(/^v/, '');
            
            const platforms = [
              'darwin-arm64',
              'darwin-x64',
              'linux-x64',
              'linux-arm64',
              'windows-x64'
            ];
            
            console.log(`Uploading Icarus CLI v${cleanVersion} to ICP...`);
            
            for (const platform of platforms) {
              await uploadBinary(platform, cleanVersion);
            }
            
            console.log('All uploads complete!');
          }
          
          main().catch(console.error);
          EOF
          
      - name: Upload binaries to ICP
        env:
          VERSION: ${{ github.event.inputs.version || github.ref_name }}
        run: |
          node upload_to_icp.js
          
      - name: Verify upload
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
          echo "Verifying CLI version $VERSION in canister..."
          dfx canister call --network ${{ env.NETWORK }} backend getLatestCLIVersion
          dfx canister call --network ${{ env.NETWORK }} backend getCLIPlatforms "(\"$VERSION\")"

  create-release:
    name: Create GitHub Release
    needs: [build, upload-to-icp]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Prepare release files
        run: |
          mkdir release-files
          for dir in ./artifacts/*/; do
            cp "$dir"/* ./release-files/ || true
          done
          
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "# Icarus CLI v${VERSION}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Authenticated Install (Recommended)" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo 'curl -sSL https://icarus.dev/install | bash' >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## What's Changed" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md || echo "- Initial release" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Checksums" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          cat ./release-files/*.sha256 >> RELEASE_NOTES.md || true
          echo '```' >> RELEASE_NOTES.md
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          files: ./release-files/*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}