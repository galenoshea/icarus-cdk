# Icarus CDK - Workspace containing all CDK crates
# This workspace provides a unified build environment for the Icarus CDK components

[workspace]
members = [
    "crates/icarus-core",
    "crates/icarus-macros",
    "crates/icarus-runtime",
    "crates/icarus",
    "crates/icarus-cli",
]
resolver = "2"

[workspace.package]
version = "1.0.0"
authors = ["Icarus CDK Contributors"]
edition = "2021"
rust-version = "1.70"
license-file = "LICENSE"
repository = "https://github.com/galenoshea/icarus-cdk"
homepage = "https://github.com/galenoshea/icarus-cdk"

[workspace.dependencies]
# External dependencies
rmcp = "0.7.0"
# Override problematic time dependencies to disable wasm features
chrono = { version = "0.4", default-features = false, features = [
    "std",
    "serde",
    "clock",
] }
web-time = { version = "1.1", default-features = false }
ic-cdk = "0.18"
ic-cdk-macros = "0.18"
ic-cdk-timers = "0.12"
ic-stable-structures = "0.7"
ic-management-canister-types = "0.4.1"
ic-wasi-polyfill = "0.11"
candid = { version = "0.10", features = ["value"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
thiserror = "2.0"
getrandom = { version = "0.2", features = ["custom"] }
tokio = { version = "1", features = ["sync", "time", "io-util", "rt", "macros"] }
tokio-stream = "0.1"
async-trait = "0.1"
tracing = "0.1"
syn = { version = "2.0", features = ["full"] }
quote = "1.0"
proc-macro2 = "1.0"
linkme = "0.3"

# Performance optimizations
rustc-hash = "2.0"  # Faster HashMap for small keys
smallvec = { version = "1.13", features = ["serde"] }   # Stack allocation for small collections
bytes = "1.7"       # Efficient buffer management
base64 = "0.22"     # Base64 encoding for Candid output

# Cryptography
sha2 = "0.10"         # For WASI conversion caching

# CLI-specific dependencies
anyhow = "1.0"
clap = { version = "4.5", features = ["derive", "env", "unicode", "wrap_help"] }
reqwest = { version = "0.12", features = ["json", "rustls-tls"] }
ic-agent = "0.44"
ic-identity-hsm = "0.44"
url = "2.5"
toml = "0.9"
ciborium = "0.2"
rand = "0.9"
num-traits = "0.2"  # For numeric type conversions
cargo_metadata = "0.18"  # For build-time dependency analysis
indicatif = "0.18"
dialoguer = "0.12"
is-terminal = "0.4"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
console = "0.16"
colored = "3.0"
dirs = "6.0"
which = "8.0"
tempfile = "3"
zip = "5"
tar = "0.4"
flate2 = "1"
os_info = "3"
sysinfo = "0.37"
self_update = { version = "0.42", features = ["archive-tar", "archive-zip", "compression-flate2"] }
nanoid = "0.4"
futures = "0.3"
futures-util = "0.3"
tokio-tungstenite = { version = "0.27", features = ["native-tls"] }
comfy-table = "7.1"        # Beautiful table formatting
crossterm = "0.29"         # Better terminal control
unicode-width = "0.2"      # Proper text width calculation
notify = "8.2"             # File system events

# Test dependencies
serial_test = "3"
assert_cmd = "2"
predicates = "3"
once_cell = "1"
ring = "0.17"
proptest = "1.6"
criterion = { version = "0.5", features = ["html_reports"] }

# Internal dependencies
icarus = { path = "crates/icarus", version = "1.0.0" }
icarus-core = { path = "crates/icarus-core", version = "1.0.0" }
icarus-macros = { path = "crates/icarus-macros", version = "1.0.0" }
icarus-runtime = { path = "crates/icarus-runtime", version = "1.0.0" }
icarus-cli = { path = "crates/icarus-cli", version = "1.0.0" }

[profile.release]
opt-level = 3
lto = "fat"
codegen-units = 1
strip = true
panic = "abort"

[profile.dev]
opt-level = 0
debug = true
incremental = true

# Performance-focused release profile with PGO support
[profile.release-with-debug]
inherits = "release"
debug = true
strip = false

# Optimized build for benchmarks
[profile.bench]
opt-level = 3
lto = "fat"
codegen-units = 1
debug = true
strip = false

# Profile for testing with optimizations
[profile.test]
opt-level = 1
debug = true

[workspace.lints.rust]
# Note: unsafe_code is allowed in allocator and profiling modules where necessary
unused_imports = "warn"
unused_variables = "warn"
dead_code = "warn"
# Rust 2024 specific lints
rust_2024_compatibility = "warn"
unused_qualifications = "warn"
unreachable_pub = "warn"
single_use_lifetimes = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_extern_crates = "warn"
unused_import_braces = "warn"
variant_size_differences = "warn"

[workspace.lints.clippy]
# Rust 2024 Edition recommended lints
all = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }

# Allow specific pedantic lints that are too noisy for this codebase
missing_errors_doc = "allow"
missing_panics_doc = "allow"
module_name_repetitions = "allow"
too_many_lines = "allow"
struct_excessive_bools = "allow"
cast_precision_loss = "allow"
multiple_crate_versions = "allow"
cargo_common_metadata = "allow"
missing_const_for_fn = "allow"
option_if_let_else = "allow"
derive_partial_eq_without_eq = "allow"
use_self = "allow"
must_use_candidate = "allow"
items_after_statements = "allow"
uninlined_format_args = "allow"
ignored_unit_patterns = "allow"
redundant_closure_for_method_calls = "allow"
map_unwrap_or = "allow"

# Performance lints (elevated to deny for critical performance)
needless_pass_by_value = "warn"
needless_borrows_for_generic_args = "warn"
large_types_passed_by_value = "warn"
trivially_copy_pass_by_ref = "warn"

# Style lints we want to keep
redundant_pattern_matching = "warn"
needless_return = "warn"

# Complexity lints we want to keep
collapsible_if = "warn"
for_kv_map = "warn"

# Modern Rust patterns (2024 edition)
manual_let_else = "warn"
manual_is_ascii_check = "warn"
redundant_locals = "warn"
arc_with_non_send_sync = "warn"
clear_with_drain = "warn"
collection_is_never_read = "warn"
needless_raw_string_hashes = "warn"
